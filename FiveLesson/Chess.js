// Реализовать структуру данных для игры в шахматы

// Фигуры:

// Все типы фигур: пешка, ладья, слон, конь, король, ферзь

// У каждой фигуры есть соответствующие методы и свойства:
// Получить допустимые ходы
// Cодержит свойство своего цвета
// Для пешек присутствует флаг говорящий о том, что пешку можно превратить в любую другую фигуру, кроме короля.

// Общие методы и свойства должны быть вынесены в родительский класс единый для всех фигур.


// Поле

// Содержит координаты всех полей и состояние всего поля 
// Содержит информацию о расположении всех фигур


// Игра

// Состояние игры: победа белого, победа черного, игра продолжается

// Хранит информацию о:
// Список фигур, которые были убиты
// Чей сейчас ход
// Сколько ходов прошло с начала игры
// Всю историю ходов.

// Работает следующая функциональность :
// Позволяет выбрать фигуру только в том случае, если цвет фигуры соответствует цвету игрока, который ходит
// Если фигура выбрана, позволяет получить допустимые ходы (обратите внимание, недостаточно просто получить ходы с помощью метода фигуры, нужно также валидировать не выходит ли ход за пределы доски, не совершается ли ход на свою фигуру или сквозь несколько вражеских)
// Позволяет отменить выбор фигуры
// Позволяет сделать ход, при этом убив фигуру которая стоит на финальной клетке (если это вражеская фигура )
// Превратить пешку, которая дошла до последнего поля в фигуру по выбору, потратив ход

// план
// 1) Класс фигура с методами и свойствами 
// 2  дочерние классы со своими методами и свойствами  
// 3) класс самой игры
// 4) класс игроков(белый и черный)
// 5) класс поля
class chessboard{
    constructor(position){
        const horisontal = 64;
        this.position = position
    }
}

class figure{
    constructor(type,color,moveshist){
        this.type = type;
        this.color = color;
        this.moveshist = moveshist;
    }
    move(){
        console.log(this.name + 'i moved')
    }

    getMovesHist(){
        console.log(this.moveshist + 'history of moves');
    }
    

}


