// Класс - это более удобный и минималистический способ описать создание обьектов 
class SomeClass{
    constructor()
    someMethod(){}
    someMethod2(){}
    someProperty = 'value'
}
// Как работает класс 
// 1) Вызывается функция constructor с параметрами которые в нее передали, ее поведение идентично обычной-функции конструктору 
// 2) В прототип обьекта который мы создали записывается обьект содержащий методы свойства обьявленные в классе 
// 3) В свойства обьекта записываются свойства класса,идентично добавлению свойств внутри конструктора 

// Различия прототипов и классов
// 1) Методы которые определяются в классе получают значения дескриптора enumurable=false 
// 2) Класс не может быть вызван без new 
// 3) Код внутри класса всегда находится в строгом режиме ('use strict') 

// Статические методы и свойства 
// Статические методы/свойства присваиваются не прототипу, который создается классом, а самой функции конструктору
// тоесть мы внутри класса сразу можем использовать методы  
class SomeClass extends ParentClass{
    constructor(){
        super()
    }
    someMethod(){}
    someMethod2(){}
    someProperty = 'value'
}

// super() 
// Когда мы создаем класс без родителя, она сам создает this 
// Когда класс наследует от другого, он ждет что его родитель создаст this 

// Для этого и нужен оператор super, он позволяет вызвать конструктор родительского класса и создать this 

// Геттеры и сеттеры 
class SomeClass{
    constructor(){}
    get property(){}
    set property(){}
}
// Приватные методы и свойства 
// реализована очень слабо

// Когда нужно использоать классы 
// Если функциональность,надо будет расширить Нужно сделать сложное поведение обьектов,методы, геттеры, сеттеры пересекаются с друг другом 
// Нужно сделать небольшой интерфейс, часть методов которого может быть приватной 