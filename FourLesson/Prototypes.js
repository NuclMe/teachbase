// Прототип - специальный резервный обьект, в котором ищутся свойства, которые не найдены в оригинальном обьекте

// как работают прототипы(очень похоже на замыкание) "цепочка прототипов"
// 1)Ищем свойство в обьекте
// 2)Если не найдено,ищем в прототипе 
// 3) Если не нашли, то ищем в прототипе, прототипа
// 4) Если дошли до самого верхнего уровня, то вернуть undefined  

// как узнать прототип обьекта? 
// 1 __proto__ - специальное свойство оьекта в котором находится ссылка на его прото (УСТАРЕЛО)
// 2 Object.getPrototypeOf - рекомендуемый способ, просто передайте ваш обьект и получите на выходе его прототип 


// Как задать прототип при использовании конструктора
// Конструктор используется для создания множества обьектов
// Для того, чтобы использовать задание прототипа конструктором, можно использовать специальное свойство prototype, которое имеет значение только для функции-конструктора

// КАК можно задать прототип 
// 1. Явно присвоить его через свойство __proto__
// 2. Явно присвоить его через setPrototypeOf 
// 3. Задать специальное свойство prototype функции-конструктору, тогда функция при вызове через new присвоит ему заданное значение прототипа новому обьекту 
// 4. При создании через класс 

// Instanceof - показывает кто у кого прототип, всю их цепочку 